/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * ec-extension_backend
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"

import { customInstance } from "../lib/axiosCustomInstance"
import type { ErrorType, BodyType } from "../lib/axiosCustomInstance"
export interface Product {
  /** The unique identifier for the product. */
  id: string
  /** The name of the product. */
  name: string
  /** A detailed description of the product. */
  description: string
  status: ProductStatus
  /**
   * The ID of the category to which the product belongs.
   * @nullable
   */
  category_id?: string | null
  /** A list of media associated with the product. */
  media: Media[]
  /** A list of variants of the product. */
  variants: Variant[]
}

/**
 * The status of the product.
 */
export type ProductStatus = (typeof ProductStatus)[keyof typeof ProductStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductStatus = {
  Active: "Active",
  Inactive: "Inactive",
  Draft: "Draft",
} as const

export interface Variant {
  /** The unique identifier for the variant. */
  id: string
  /**
   * The name of the variant.
   * @nullable
   */
  name?: string | null
  /**
   * The stock keeping unit of the variant.
   * @nullable
   */
  sku?: string | null
  /**
   * The barcode of the variant.
   * @nullable
   */
  barcode?: string | null
  /** Whether the variant is available for sale. */
  available_for_sale: boolean
  /** The position of the variant in a list. */
  list_order: number
  /** The unique identifier for the inventory item. */
  inventory_item_id: string
  inventory_policy: InventoryPolicy
  /**
   * The quantity available in inventory.
   * @nullable
   */
  inventory_quantity?: number | null
  /** The price of the variant. */
  price: number
  /** Whether the variant is taxable. */
  taxable: boolean
  /**
   * The tax code applicable to the variant.
   * @nullable
   */
  tax_code?: string | null
  /** The timestamp when the variant was created. */
  created_at: string
  /** The timestamp when the variant was last updated. */
  updated_at: string
}

/**
 * The policy for inventory management.
 */
export type InventoryPolicy = (typeof InventoryPolicy)[keyof typeof InventoryPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InventoryPolicy = {
  Deny: "Deny",
  Continue: "Continue",
} as const

export interface Media {
  /** The unique identifier for the media. */
  id: string
  /**
   * The name of the media file.
   * @nullable
   */
  name?: string | null
  status: MediaStatus
  content?: MediaContent
  /** The timestamp when the media was created. */
  created_at: string
  /** The timestamp when the media was last updated. */
  updated_at: string
}

/**
 * The status of the media.
 */
export type MediaStatus = (typeof MediaStatus)[keyof typeof MediaStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MediaStatus = {
  Active: "Active",
  Inactive: "Inactive",
  InPreparation: "InPreparation",
} as const

export interface MediaContent {
  /** The image content associated with the media. */
  image?: Image
}

export interface Image {
  /** The unique identifier for the image. */
  id: string
  /**
   * The alternative text for the image.
   * @nullable
   */
  alt?: string | null
  /**
   * The source URL of the image.
   * @nullable
   */
  src?: string | null
}

export interface Customer {
  /** The unique identifier of the customer. */
  id: string
  /** A list of addresses associated with the customer. */
  addresses: Address[]
  /** The default address of the customer. */
  default_address?: Address
  /** The display name of the customer. */
  display_name: string
  /**
   * The email address of the customer.
   * @nullable
   */
  email?: string | null
  /**
   * The first name of the customer.
   * @nullable
   */
  first_name?: string | null
  /**
   * The last name of the customer.
   * @nullable
   */
  last_name?: string | null
  /** An image associated with the customer. */
  image?: Image
  /**
   * The phone number of the customer.
   * @nullable
   */
  phone?: string | null
  /**
   * A note associated with the customer.
   * @nullable
   */
  note?: string | null
  status: CustomerStatus
  /** Indicates if the customer's email is verified. */
  verified_email: boolean
  /** The timestamp when the customer was created. */
  created_at: string
  /** The timestamp when the customer was last updated. */
  updated_at: string
}

/**
 * The status of the customer.
 */
export type CustomerStatus = (typeof CustomerStatus)[keyof typeof CustomerStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerStatus = {
  Active: "Active",
  Inactive: "Inactive",
} as const

export interface Address {
  /**
   * The primary address line.
   * @nullable
   */
  address1?: string | null
  /**
   * The secondary address line, such as apartment or suite number.
   * @nullable
   */
  address2?: string | null
  /**
   * The city of the address.
   * @nullable
   */
  city?: string | null
  /** Indicates if the address coordinates are validated. */
  coordinates_validated: boolean
  /**
   * The country of the address.
   * @nullable
   */
  country?: string | null
  /**
   * The first name associated with the address.
   * @nullable
   */
  first_name?: string | null
  /**
   * The last name associated with the address.
   * @nullable
   */
  last_name?: string | null
  /**
   * The state or province of the address.
   * @nullable
   */
  province?: string | null
  /**
   * The postal code of the address.
   * @nullable
   */
  zip?: string | null
  /**
   * The phone number associated with the address.
   * @nullable
   */
  phone?: string | null
}

/**
 * Common Error Responses
 */
export interface DomainError {
  message: string
}

/**
 * Get detailed product information resoponse
 */
export type GetProductResponseResponse = {
  product: Product
}

/**
 * Get a list of products resoponse
 */
export type GetProductsResponseResponse = {
  products: Product[]
}

/**
 * Get a list of customers resoponse
 */
export type GetCustomersResponseResponse = {
  customers: Customer[]
}

/**
 * Bad request
 */
export type BadRequestResponse = DomainError

/**
 * Not found
 */
export type NotFoundResponse = DomainError

/**
 * Internal server error
 */
export type InternalServerErrorResponse = DomainError

/**
 * Service unavailable
 */
export type ServiceUnavailableResponse = DomainError

export type PostSignInRequestBody = {
  /** The ID token. */
  id_token?: string
  /** The refresh token. */
  refresh_token?: string
}

export type GetProductsParams = {
  /**
   * limit
   */
  limit?: number
  /**
   * offset
   */
  offset?: number
}

export type GetCustomersParams = {
  /**
   * email
   */
  email?: string
}

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Get detailed product information
 * @summary Get detailed product information
 */
export const getProduct = (id: number, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<GetProductResponseResponse>(
    { url: `/ec-extension/products/${id}`, method: "GET", signal },
    options,
  )
}

export const getGetProductQueryKey = (id: number) => {
  return [`/ec-extension/products/${id}`] as const
}

export const getGetProductQueryOptions = <
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetProductQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProduct>>> = ({ signal }) =>
    getProduct(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProduct>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductQueryResult = NonNullable<Awaited<ReturnType<typeof getProduct>>>
export type GetProductQueryError = ErrorType<
  BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse
>

export function useGetProduct<
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProduct>>,
          TError,
          Awaited<ReturnType<typeof getProduct>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProduct<
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProduct>>,
          TError,
          Awaited<ReturnType<typeof getProduct>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProduct<
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get detailed product information
 */

export function useGetProduct<
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetProductQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get detailed product information
 */
export const prefetchGetProduct = async <
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  queryClient: QueryClient,
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): Promise<QueryClient> => {
  const queryOptions = getGetProductQueryOptions(id, options)

  await queryClient.prefetchQuery(queryOptions)

  return queryClient
}

/**
 * Get a list of products
 * @summary Get a list of products
 */
export const getProducts = (
  params?: GetProductsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetProductsResponseResponse>(
    { url: `/ec-extension/products`, method: "GET", params, signal },
    options,
  )
}

export const getGetProductsQueryKey = (params?: GetProductsParams) => {
  return [`/ec-extension/products`, ...(params ? [params] : [])] as const
}

export const getGetProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetProductsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({ signal }) =>
    getProducts(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getProducts>>>
export type GetProductsQueryError = ErrorType<
  BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse
>

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params: undefined | GetProductsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of products
 */

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetProductsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get a list of products
 */
export const prefetchGetProducts = async <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  queryClient: QueryClient,
  params?: GetProductsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): Promise<QueryClient> => {
  const queryOptions = getGetProductsQueryOptions(params, options)

  await queryClient.prefetchQuery(queryOptions)

  return queryClient
}

/**
 * Get a list of customers
 * @summary Get a list of customers
 */
export const getCustomers = (
  params?: GetCustomersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetCustomersResponseResponse>(
    { url: `/ec-extension/customers`, method: "GET", params, signal },
    options,
  )
}

export const getGetCustomersQueryKey = (params?: GetCustomersParams) => {
  return [`/ec-extension/customers`, ...(params ? [params] : [])] as const
}

export const getGetCustomersQueryOptions = <
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params?: GetCustomersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCustomersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomers>>> = ({ signal }) =>
    getCustomers(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCustomers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCustomersQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomers>>>
export type GetCustomersQueryError = ErrorType<
  BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse
>

export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params: undefined | GetCustomersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomers>>,
          TError,
          Awaited<ReturnType<typeof getCustomers>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params?: GetCustomersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomers>>,
          TError,
          Awaited<ReturnType<typeof getCustomers>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params?: GetCustomersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of customers
 */

export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  params?: GetCustomersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCustomersQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get a list of customers
 */
export const prefetchGetCustomers = async <
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
>(
  queryClient: QueryClient,
  params?: GetCustomersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): Promise<QueryClient> => {
  const queryOptions = getGetCustomersQueryOptions(params, options)

  await queryClient.prefetchQuery(queryOptions)

  return queryClient
}

/**
 * Set the token passed to the httpOnly cookie and start a backend cookie session.
 * @summary Sign in
 */
export const postSignIn = (
  postSignInRequestBody: BodyType<PostSignInRequestBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/ec-extension/auth/sign-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postSignInRequestBody,
      signal,
    },
    options,
  )
}

export const getPostSignInMutationOptions = <
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSignIn>>,
    TError,
    { data: BodyType<PostSignInRequestBody> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSignIn>>,
  TError,
  { data: BodyType<PostSignInRequestBody> },
  TContext
> => {
  const mutationKey = ["postSignIn"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSignIn>>,
    { data: BodyType<PostSignInRequestBody> }
  > = (props) => {
    const { data } = props ?? {}

    return postSignIn(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postSignIn>>>
export type PostSignInMutationBody = BodyType<PostSignInRequestBody>
export type PostSignInMutationError = ErrorType<
  BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse
>

/**
 * @summary Sign in
 */
export const usePostSignIn = <
  TError = ErrorType<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse | ServiceUnavailableResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSignIn>>,
    TError,
    { data: BodyType<PostSignInRequestBody> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof postSignIn>>,
  TError,
  { data: BodyType<PostSignInRequestBody> },
  TContext
> => {
  const mutationOptions = getPostSignInMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getGetProductResponseMock = (
  overrideResponse: Partial<GetProductResponseResponse> = {},
): GetProductResponseResponse => ({
  product: {
    id: faker.string.alpha(20),
    name: faker.string.alpha(20),
    description: faker.string.alpha(20),
    status: faker.helpers.arrayElement(Object.values(ProductStatus)),
    category_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
    media: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.string.alpha(20),
      name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      status: faker.helpers.arrayElement(Object.values(MediaStatus)),
      content: faker.helpers.arrayElement([
        {
          image: faker.helpers.arrayElement([
            {
              id: faker.string.alpha(20),
              alt: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
              src: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
            },
            undefined,
          ]),
        },
        undefined,
      ]),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    })),
    variants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.string.alpha(20),
      name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      sku: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      barcode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      available_for_sale: faker.datatype.boolean(),
      list_order: faker.number.int({ min: undefined, max: undefined }),
      inventory_item_id: faker.string.alpha(20),
      inventory_policy: faker.helpers.arrayElement(Object.values(InventoryPolicy)),
      inventory_quantity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      price: faker.number.float(),
      taxable: faker.datatype.boolean(),
      tax_code: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    })),
  },
  ...overrideResponse,
})

export const getGetProductsResponseMock = (
  overrideResponse: Partial<GetProductsResponseResponse> = {},
): GetProductsResponseResponse => ({
  products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.alpha(20),
    name: faker.string.alpha(20),
    description: faker.string.alpha(20),
    status: faker.helpers.arrayElement(Object.values(ProductStatus)),
    category_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
    media: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.string.alpha(20),
      name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      status: faker.helpers.arrayElement(Object.values(MediaStatus)),
      content: faker.helpers.arrayElement([
        {
          image: faker.helpers.arrayElement([
            {
              id: faker.string.alpha(20),
              alt: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
              src: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
            },
            undefined,
          ]),
        },
        undefined,
      ]),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    })),
    variants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.string.alpha(20),
      name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      sku: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      barcode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      available_for_sale: faker.datatype.boolean(),
      list_order: faker.number.int({ min: undefined, max: undefined }),
      inventory_item_id: faker.string.alpha(20),
      inventory_policy: faker.helpers.arrayElement(Object.values(InventoryPolicy)),
      inventory_quantity: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined,
      ]),
      price: faker.number.float(),
      taxable: faker.datatype.boolean(),
      tax_code: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    })),
  })),
  ...overrideResponse,
})

export const getGetCustomersResponseMock = (
  overrideResponse: Partial<GetCustomersResponseResponse> = {},
): GetCustomersResponseResponse => ({
  customers: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.alpha(20),
    addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      address1: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      address2: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      coordinates_validated: faker.datatype.boolean(),
      country: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      first_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      last_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      zip: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
    })),
    default_address: faker.helpers.arrayElement([
      {
        address1: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
        address2: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
        city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
        coordinates_validated: faker.datatype.boolean(),
        country: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
        first_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
        last_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
        province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
        zip: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
        phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      },
      undefined,
    ]),
    display_name: faker.string.alpha(20),
    email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
    first_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
    last_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
    image: faker.helpers.arrayElement([
      {
        id: faker.string.alpha(20),
        alt: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
        src: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
      },
      undefined,
    ]),
    phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
    note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]),
    status: faker.helpers.arrayElement(Object.values(CustomerStatus)),
    verified_email: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  ...overrideResponse,
})

export const getGetProductMockHandler = (
  overrideResponse?:
    | GetProductResponseResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetProductResponseResponse> | GetProductResponseResponse),
) => {
  return http.get("*/ec-extension/products/:id", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProductResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetProductsMockHandler = (
  overrideResponse?:
    | GetProductsResponseResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetProductsResponseResponse> | GetProductsResponseResponse),
) => {
  return http.get("*/ec-extension/products", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProductsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetCustomersMockHandler = (
  overrideResponse?:
    | GetCustomersResponseResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetCustomersResponseResponse> | GetCustomersResponseResponse),
) => {
  return http.get("*/ec-extension/customers", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCustomersResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getPostSignInMockHandler = (
  overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void),
) => {
  return http.post("*/ec-extension/auth/sign-in", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getEcExtensionBackendMock = () => [
  getGetProductMockHandler(),
  getGetProductsMockHandler(),
  getGetCustomersMockHandler(),
  getPostSignInMockHandler(),
]
